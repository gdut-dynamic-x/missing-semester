## A1

情况一: 如果还没     git add file    


使用该指令进行撤销: 

     git checkout -- fileName     


情况二: 已完成    git add file但还没 git commit-m 

    git reset HEAD^
    git  status
    git checkout -- file 

## A2
情况一:不修改历史的回退
通过 

    git log 
    
或者

    git log --pretty=oneline 
    
或者

    git reflog
    
找到对应的commit id进行回退：

    git reset --hard (id)
情况二:若想回退到上一个版本

    git reset --hard HAED^
 
 ## A3
 
 ### 方法一: 如果待合并的分支在当前分支的下游，也就是说没有分叉时，会发生快速合并，从test分支切换到master分支，然后合并test分支
 
     git checkout master
     git merge test
### 方法二: 如果我们不想要快速合并，那么我们可以强制指定为非快速合并，只需加上--no-ff参数

     git checkout master
     git merge –no-ff test
     
### 方法三: svn的在合并分支时采用的就是这种方式，squash会在当前分支新建一个提交节点 squash和no-ff非常类似，区别只有一点不会保留对合入分支的引用

     git checkout master
     git merge –squash test
     
### 方法四: 当要合并两个分叉的分支时，merge的方式是将待合入分支和当前分支不同的部分，rebase与merge不同，rebase会将合入分支上超前的节点在待合入分支上重新提交一遍

     git rebase master
     
### 方法五: 如果只需要部分代码变动（某几个提交），这时可以使用 cherry pick。

     git cherry-pick <commit-id>
     
转移提交

     git cherry-pick <commit-idA> <commit-idB>
     
     
*上面的命令可以转移从 A 到 B 的所有提交。这一系列的哈希码需要按提交时间先后排列, 即最先提交的 commit 放在前面，否则命令将失败，但不会报错.


*使用命令 (1) ，提交 A 不会包含在 cherry pick 中，相当于左开右闭区间；使用命令 (2) ，提交 A 将会包含在 cherry pick 中.

